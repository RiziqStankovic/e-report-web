version: "3.8"

services:
  # Frontend (Next.js)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://be-report.cloudfren.id
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - e-report-network

  # Backend (Golang)
  backend:
    build:
      context: ../e-report-be
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=e_report
      - JWT_SECRET=your-secret-key
      - CORS_ORIGINS=http://e-report.cloudfren.id,http://localhost:3001
    depends_on:
      - postgres
    networks:
      - e-report-network

  # Database (PostgreSQL)
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=e_report
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../e-report-be/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - e-report-network

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - e-report-network

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - e-report-network

volumes:
  postgres_data:
  redis_data:

networks:
  e-report-network:
    driver: bridge
